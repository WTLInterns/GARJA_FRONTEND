// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/about/page.tsx
{
  const handler = {} as typeof import("../../src/app/about/page.js")
  handler satisfies AppPageConfig<"/about">
}

// Validate ../../src/app/account-settings/page.tsx
{
  const handler = {} as typeof import("../../src/app/account-settings/page.js")
  handler satisfies AppPageConfig<"/account-settings">
}

// Validate ../../src/app/admin/analytics/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/analytics/page.js")
  handler satisfies AppPageConfig<"/admin/analytics">
}

// Validate ../../src/app/admin/customers/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/customers/page.js")
  handler satisfies AppPageConfig<"/admin/customers">
}

// Validate ../../src/app/admin/dashboard/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/dashboard/page.js")
  handler satisfies AppPageConfig<"/admin/dashboard">
}

// Validate ../../src/app/admin/orders/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/orders/page.js")
  handler satisfies AppPageConfig<"/admin/orders">
}

// Validate ../../src/app/admin/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/page.js")
  handler satisfies AppPageConfig<"/admin">
}

// Validate ../../src/app/admin/products/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/products/page.js")
  handler satisfies AppPageConfig<"/admin/products">
}

// Validate ../../src/app/admin/settings/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/settings/page.js")
  handler satisfies AppPageConfig<"/admin/settings">
}

// Validate ../../src/app/auth/callback/page.tsx
{
  const handler = {} as typeof import("../../src/app/auth/callback/page.js")
  handler satisfies AppPageConfig<"/auth/callback">
}

// Validate ../../src/app/cart/page.tsx
{
  const handler = {} as typeof import("../../src/app/cart/page.js")
  handler satisfies AppPageConfig<"/cart">
}

// Validate ../../src/app/checkout/page.tsx
{
  const handler = {} as typeof import("../../src/app/checkout/page.js")
  handler satisfies AppPageConfig<"/checkout">
}

// Validate ../../src/app/contact/page.tsx
{
  const handler = {} as typeof import("../../src/app/contact/page.js")
  handler satisfies AppPageConfig<"/contact">
}

// Validate ../../src/app/oauth-test/page.tsx
{
  const handler = {} as typeof import("../../src/app/oauth-test/page.js")
  handler satisfies AppPageConfig<"/oauth-test">
}

// Validate ../../src/app/order-success/page.tsx
{
  const handler = {} as typeof import("../../src/app/order-success/page.js")
  handler satisfies AppPageConfig<"/order-success">
}

// Validate ../../src/app/orders/page.tsx
{
  const handler = {} as typeof import("../../src/app/orders/page.js")
  handler satisfies AppPageConfig<"/orders">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/privacy-policy/page.tsx
{
  const handler = {} as typeof import("../../src/app/privacy-policy/page.js")
  handler satisfies AppPageConfig<"/privacy-policy">
}

// Validate ../../src/app/product/[id]/page.tsx
{
  const handler = {} as typeof import("../../src/app/product/[id]/page.js")
  handler satisfies AppPageConfig<"/product/[id]">
}

// Validate ../../src/app/products/page.tsx
{
  const handler = {} as typeof import("../../src/app/products/page.js")
  handler satisfies AppPageConfig<"/products">
}

// Validate ../../src/app/terms-of-service/page.tsx
{
  const handler = {} as typeof import("../../src/app/terms-of-service/page.js")
  handler satisfies AppPageConfig<"/terms-of-service">
}

// Validate ../../src/app/test-oauth/page.tsx
{
  const handler = {} as typeof import("../../src/app/test-oauth/page.js")
  handler satisfies AppPageConfig<"/test-oauth">
}

// Validate ../../src/app/test-storage/page.tsx
{
  const handler = {} as typeof import("../../src/app/test-storage/page.js")
  handler satisfies AppPageConfig<"/test-storage">
}

// Validate ../../src/app/user/orders/page.tsx
{
  const handler = {} as typeof import("../../src/app/user/orders/page.js")
  handler satisfies AppPageConfig<"/user/orders">
}

// Validate ../../src/app/wishlist/page.tsx
{
  const handler = {} as typeof import("../../src/app/wishlist/page.js")
  handler satisfies AppPageConfig<"/wishlist">
}

// Validate ../../src/app/api/create-order/route.ts
{
  const handler = {} as typeof import("../../src/app/api/create-order/route.js")
  handler satisfies RouteHandlerConfig<"/api/create-order">
}





// Validate ../../src/app/admin/layout.tsx
{
  const handler = {} as typeof import("../../src/app/admin/layout.js")
  handler satisfies LayoutConfig<"/admin">
}

// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
